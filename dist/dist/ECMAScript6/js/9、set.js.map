{"version":3,"sources":["..\\..\\..\\ECMAScript6\\js\\9、set.js"],"names":["set","Set","console","log","set2","forEach","i","add","size","delete","has","clear","value","key"],"mappings":"AAAA;;AAEA;;;;;;;;AAOA,IAAIA,MAAM,IAAIC,GAAJ,CAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAAR,CAAV;AACAC,QAAQC,GAAR,CAAYH,GAAZ;;AAEA,IAAII,OAAO,IAAIH,GAAJ,EAAX;AACA,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8CI,OAA9C,CAAsD,UAAUC,CAAV,EAAa;AAC/D,WAAOF,KAAKG,GAAL,CAASD,CAAT,CAAP;AACH,CAFD;AAGAJ,QAAQC,GAAR,CAAYC,IAAZ;;AAEA;;;;AAIAF,QAAQC,GAAR,CAAYC,KAAKI,IAAjB;;AAEA;;;;;;;AAOAN,QAAQC,GAAR,CAAYC,KAAKG,GAAL,CAAS,CAAT,CAAZ,E,CAA0B;AAC1BL,QAAQC,GAAR,CAAYC,KAAKK,MAAL,CAAY,CAAZ,CAAZ;AACAP,QAAQC,GAAR,CAAYC,KAAKM,GAAL,CAAS,CAAT,CAAZ;AACAR,QAAQC,GAAR,CAAYC,KAAKO,KAAL,EAAZ;AACAT,QAAQC,GAAR,CAAYC,IAAZ;;AAEAF,QAAQC,GAAR,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8CE,OAA9C,CAAsD,UAAUO,KAAV,EAAiBC,GAAjB,EAAsB;AACpF,WAAOX,QAAQC,GAAR,CAAYU,GAAZ,EAAiBD,KAAjB,CAAP;AACH,CAFW,CAAZ;AAGA","file":"9、set.js","sourcesContent":["\"use strict\";\n\n/*  \r\n    set的是新的数据结构  类似于数组,但是区别于数组的是 所有成员是唯一的 不允许有重复的值\r\n    set是一个构造函数 生成set数据结构  接收一个数组作为参数\r\n\r\n    重点:\r\n        Set不是数组 是类似于数组 是一个新的数据结构 所有成员是唯一的\r\n*/\nvar set = new Set([1, 2, 3, 4, 5, 6, 6, 6, 6, 1, 2, 3, 4, 5, 6]);\nconsole.log(set);\n\nvar set2 = new Set();\n[1, 2, 3, 4, 5, 6, 6, 6, 6, 1, 2, 3, 4, 5, 6].forEach(function (i) {\n    return set2.add(i);\n});\nconsole.log(set2);\n\n/*  \r\n    size是Set构造函数的原型对象上的属性 返回的是实例成员的数量\r\n    Set.prototype.size\r\n*/\nconsole.log(set2.size);\n\n/*  \r\n    Set实例的方法:\r\n        add(value)：添加某个值，返回 Set 结构本身。\r\n        delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\r\n        has(value)：返回一个布尔值，表示该值是否为Set的成员。\r\n        clear()：清除所有成员，没有返回值。\r\n*/\nconsole.log(set2.add(1)); //因为Set数据结构的原因 所有成员都是唯一的  所以通过add添加相同的值的时候 是无法添加进去的\nconsole.log(set2.delete(1));\nconsole.log(set2.has(1));\nconsole.log(set2.clear());\nconsole.log(set2);\n\nconsole.log([1, 2, 3, 4, 5, 6, 6, 6, 6, 1, 2, 3, 4, 5, 6].forEach(function (value, key) {\n    return console.log(key, value);\n}));\n//# sourceMappingURL=9、set.js.map"]}