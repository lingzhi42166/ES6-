{"version":3,"sources":["..\\..\\..\\ECMAScript6\\js\\6、函数的拓展.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","f","v","console","log","f1","f2","_console","_len","arguments","arg","_key","apply","concat","f3","_ref","value1","f4","_ref2","_ref3","fn","cb","setTimeout","fn2","fn3","_this","_console2","call","fn4","fn5","_ref4","x","y"],"mappings":"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","file":"6、函数的拓展.js","sourcesContent":["\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n/* \r\n    箭头函数    \"=>\" 定义函数  \r\n*/\nvar f = function f(v) {\n    return v + 1;\n};\n/*  \r\n    function f(v){\r\n        return v\r\n    }\r\n*/\nconsole.log(f(1));\n\n// 多个参数就通过()包裹  没有参数 就通过() 代替参数部分\nvar f1 = function f1() {\n    return 1;\n};\nconsole.log(f1());\n\n// 当代码块的语句多于1条 则通过{}包裹着\nvar f2 = function f2(value) /*,value2*/{\n    var _console;\n\n    for (var _len = arguments.length, arg = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        arg[_key - 1] = arguments[_key];\n    }\n\n    //...可以是包裹操作符 包裹操作符就把接下来的所有值都通过一个数组包裹起来 导致value2是没有值的\n    console.log(value);\n    (_console = console).log.apply(_console, arg); //也可以是展开操作符 =>把数组的值都遍历了出来 通过一个字符串返回出来 并且只能在表达式中使用\n    console.log(arg);\n};\nvar arr = [2, 3];\nf2.apply(undefined, [1].concat(arr));\n\n// 还可以通过解构赋值\nvar f3 = function f3(_ref) {\n    var value = _ref.value,\n        value1 = _ref.value1;\n\n    return value + value1;\n};\nconsole.log(f3({ value: 1, value1: 2 }));\n\nvar f4 = function f4(_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        value = _ref3[0],\n        value1 = _ref3[1];\n\n    return value + value1;\n};\nconsole.log(f4([1, 2]));\n\n// 自执行函数\n(function () {\n    console.log(\"这是自执行函数 通过箭头函数 看起来整洁多了\");\n})();\n// 回调函数\nfunction fn(cb) {\n    // setTimeout(cb(),0); 当程序运行这里的时候 cb()就直接执行了 只要看到() 就是直接执行 \n    setTimeout(cb, 0);\n}\n// fn();\nfn(function () {\n    console.log(\"这是回调函数,也是简洁！\");\n});\n\n/* \r\n    注意事项:\r\n        （1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\r\n\r\n        （2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\r\n\r\n        （3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数 也就是... 代替。\r\n\r\n        （4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。\r\n*/\nvar fn2 = function fn2() {\n    console.log(undefined);\n};\nfn2(); //是在全局window 下定义的 所以是window\n\nfunction fn3() {\n    var _this = this;\n\n    setTimeout(function () {\n        console.log(_this);\n    }, 0);\n    // ((v1,v2)=>{\n    //     console.log(this);\n    //     console.log(arguments); 箭头函数不支持通过arguments获取到参数 只能通过...\n    // })(1,2)\n    (function () {\n        var _console2;\n\n        console.log(_this);\n        (_console2 = console).log.apply(_console2, arguments);\n    })(1, 2);\n}\n// fn3(); fn3是在window下定义的 箭头函数又是在fn3定义的\nfn3.call({}); //修改fn3的this\n\n// ==========================================箭头函数end=============================================\n\n/* \r\n    函数的参数允许定义默认值了\r\n*/\nvar fn4 = function fn4() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var value1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n    console.log(value, value1);\n};\nfn4(2);\nfn4();\n\nvar fn5 = function fn5() {\n    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        x = _ref4.x,\n        y = _ref4.y;\n\n    // 上面定义的默认是{} => {undefined,undefined} 也就是上面的{x,y} = {} 其实就是解构赋值一样 \n    console.log(x, y); //1 undefined  首先 下面解构的时候 因为y没有对应的值 所以解构失败 赋值undefined  并且形参定义了默认值{} 也没有赋值 所以解构的时候 也是undefined\n};\nfn5({ x: 1 });\nfn5(); //如果不给默认值 那么这里不传入参数 就会报错！ 安全性问题！\n//# sourceMappingURL=6、函数的拓展.js.map"]}