{"version":3,"sources":["..\\..\\..\\ECMAScript6\\js\\11、for of.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","key","console","log","forEach","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","return","set","Set","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_value","map","Map","_len","arguments","_key","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_value2","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_step4$value","_key2","_value3"],"mappings":"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","file":"11、for of.js","sourcesContent":["\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n/* \r\n    for...of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象\r\n    （比如arguments对象、DOM NodeList 对象）、后文的 Generator 对象，以及字符串。\r\n    一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”（iterable）\r\n    原生具备 Iterator 接口的数据结构如下。\r\n        Array\r\n        Map\r\n        Set\r\n        String\r\n        TypedArray\r\n        函数的 arguments 对象\r\n        NodeList 对象\r\n\r\n\r\n        一些数据结构没有(比如对象)\r\n        凡是部署了Symbol.iterator属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。\r\n\r\n\r\n        总结:\r\n            for of 遍历数组和set的话 都是返回成员值\r\n            如果遍历的是Map的话 返回的是一个数组 分别是键名和键值\r\n*/\n\n/* \r\n    数组的遍历\r\n*/\nvar arr = [1, 2, 3];\n// for in 是给对象 遍历属性名的   如果遍历数组 则是获取到的是索引\nfor (var key in arr) {\n    console.log(key);\n}\n// forEach 是遍历数组的  提供两个参数给回调函数  一个是数组的成员值 一个是成员索引\narr.forEach(function (value, key) {\n    console.log(value, key);\n});\n// for of 在数组的应用  返回的是 数组的成员值 如果需要获取索引 去看ES6的数组的扩展\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\n\ntry {\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var value = _step.value;\n\n        console.log(value);\n    }\n\n    /*\r\n        对象的遍历\r\n        好吧 现在还不知道怎么通过for of 遍历对象\r\n    \r\n    console.log(\"==========对象的遍历==========\");\r\n    let obj = {\r\n        x : 1,\r\n        y : 1,\r\n        [Symbol.iterator] : function () {\r\n            return {\r\n              next: function () {\r\n                return {\r\n                  value: 1,\r\n                  done: true\r\n                };\r\n              }\r\n            };\r\n        }\r\n    }\r\n    // for in 遍历出对象的属性\r\n    for(let key in obj){\r\n        console.log(key);\r\n    }\r\n    // for of在对象的应用\r\n    for(let value of obj){\r\n        console.log(value);\r\n    }\r\n    */\n\n    /* \r\n        set Map 的遍历\r\n        发现set的索引是从1开始的\r\n    */\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally {\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n        }\n    } finally {\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\n\nconsole.log(\"==========set Map 的遍历==========\");\nvar set = new Set([1, 2, 3]);\nset.forEach(function (value, key) {\n    console.log(value, key);\n});\n\n/* set 不能通过for in遍历\r\nfor (let key in set) {\r\n    console.log(key);\r\n} */\n// for of 在set的应用 返回的是set的成员值\nvar _iteratorNormalCompletion2 = true;\nvar _didIteratorError2 = false;\nvar _iteratorError2 = undefined;\n\ntry {\n    for (var _iterator2 = set[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var _value = _step2.value;\n\n        console.log(_value);\n    }\n\n    /* \r\n        通过for of 遍历 Map 结构时，返回的是一个数组，\r\n        该数组的两个成员分别为当前 Map 成员的键名和键值。\r\n    \r\n        但是通过forEach返回的是 第一个参数是属性值 第二个参数是属性\r\n    */\n} catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n} finally {\n    try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n        }\n    } finally {\n        if (_didIteratorError2) {\n            throw _iteratorError2;\n        }\n    }\n}\n\nvar map = new Map([[\"x\", 1], [\"y\", 2]]);\nconsole.log(map);\nmap.forEach(function () {\n    for (var _len = arguments.length, arr = Array(_len), _key = 0; _key < _len; _key++) {\n        arr[_key] = arguments[_key];\n    }\n\n    //通过包裹操作符 把可以遍历的都包裹在一个新的数组里\n    console.log(arr);\n});\nmap.forEach(function (value, key) {\n    console.log(value, key);\n});\nvar _iteratorNormalCompletion3 = true;\nvar _didIteratorError3 = false;\nvar _iteratorError3 = undefined;\n\ntry {\n    for (var _iterator3 = map[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var _value2 = _step3.value;\n\n        console.log(_value2); //返回的是一个数组\n    }\n} catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n} finally {\n    try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n        }\n    } finally {\n        if (_didIteratorError3) {\n            throw _iteratorError3;\n        }\n    }\n}\n\nvar _iteratorNormalCompletion4 = true;\nvar _didIteratorError4 = false;\nvar _iteratorError4 = undefined;\n\ntry {\n    for (var _iterator4 = map[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var _step4$value = _slicedToArray(_step4.value, 2),\n            _key2 = _step4$value[0],\n            _value3 = _step4$value[1];\n\n        console.log(_key2, _value3); //返回的是一个数组\n    }\n} catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n} finally {\n    try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n        }\n    } finally {\n        if (_didIteratorError4) {\n            throw _iteratorError4;\n        }\n    }\n}\n//# sourceMappingURL=11、for of.js.map"]}