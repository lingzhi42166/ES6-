{"version":3,"sources":["..\\..\\..\\ECMAScript6\\js\\6、函数的拓展.js"],"names":["f","v","console","log","f1","f2","value","arg","arr","f3","value1","f4","fn","cb","setTimeout","fn2","fn3","call","fn4","fn5","x","y"],"mappings":";;;;AAAA;;;AAGA,IAAIA,IAAI,SAAJA,CAAI;AAAA,WAAKC,IAAI,CAAT;AAAA,CAAR;AACA;;;;;AAKAC,QAAQC,GAAR,CAAYH,EAAE,CAAF,CAAZ;;AAEA;AACA,IAAII,KAAK,SAALA,EAAK;AAAA,WAAM,CAAN;AAAA,CAAT;AACAF,QAAQC,GAAR,CAAYC,IAAZ;;AAEA;AACA,IAAIC,KAAK,SAALA,EAAK,CAACC,KAAD,EAAa,WAAgB;AAAA;;AAAA,sCAAnBC,GAAmB;AAAnBA,WAAmB;AAAA;;AAAC;AACnCL,YAAQC,GAAR,CAAYG,KAAZ;AACA,yBAAQH,GAAR,iBAAeI,GAAf,EAFkC,CAEd;AACpBL,YAAQC,GAAR,CAAYI,GAAZ;AACH,CAJD;AAKA,IAAIC,MAAM,CAAC,CAAD,EAAG,CAAH,CAAV;AACAH,qBAAG,CAAH,SAAQG,GAAR;;AAEA;AACA,IAAIC,KAAK,SAALA,EAAK,OAAoB;AAAA,QAAlBH,KAAkB,QAAlBA,KAAkB;AAAA,QAAZI,MAAY,QAAZA,MAAY;;AACzB,WAAOJ,QAAQI,MAAf;AACH,CAFD;AAGAR,QAAQC,GAAR,CAAYM,GAAG,EAACH,OAAM,CAAP,EAASI,QAAO,CAAhB,EAAH,CAAZ;;AAEA,IAAIC,KAAK,SAALA,EAAK,QAAoB;AAAA;AAAA,QAAlBL,KAAkB;AAAA,QAAZI,MAAY;;AACzB,WAAOJ,QAAQI,MAAf;AACH,CAFD;AAGAR,QAAQC,GAAR,CAAYQ,GAAG,CAAC,CAAD,EAAG,CAAH,CAAH,CAAZ;;AAEA;AACA,CAAC,YAAI;AACDT,YAAQC,GAAR,CAAY,wBAAZ;AACH,CAFD;AAGA;AACA,SAASS,EAAT,CAAYC,EAAZ,EAAe;AACX;AACAC,eAAWD,EAAX,EAAc,CAAd;AACH;AACD;AACAD,GAAG,YAAI;AAACV,YAAQC,GAAR,CAAY,cAAZ;AAA4B,CAApC;;AAGA;;;;;;;;;;AAUA,IAAIY,MAAM,SAANA,GAAM,GAAM;AACZb,YAAQC,GAAR;AACH,CAFD;AAGAY,M,CAAM;;AAEN,SAASC,GAAT,GAAc;AAAA;;AACVF,eAAW,YAAI;AACXZ,gBAAQC,GAAR,CAAY,KAAZ;AACH,KAFD,EAEE,CAFF;AAGA;AACA;AACA;AACA;AACA,KAAC,YAAU;AAAA;;AACPD,gBAAQC,GAAR,CAAY,KAAZ;AACA,8BAAQA,GAAR;AACH,KAHD,EAGG,CAHH,EAGK,CAHL;AAKH;AACD;AACAa,IAAIC,IAAJ,CAAS,EAAT,E,CAAa;;AAEb;;AAEA;;;AAGA,IAAIC,MAAM,SAANA,GAAM,GAA0B;AAAA,QAAzBZ,KAAyB,uEAAjB,CAAiB;AAAA,QAAfI,MAAe,uEAAN,CAAM;;AAChCR,YAAQC,GAAR,CAAYG,KAAZ,EAAkBI,MAAlB;AACH,CAFD;AAGAQ,IAAI,CAAJ;AACAA;;AAEA,IAAIC,MAAM,SAANA,GAAM,GAAgB;AAAA,oFAAP,EAAO;AAAA,QAAdC,CAAc,SAAdA,CAAc;AAAA,QAAZC,CAAY,SAAZA,CAAY;;AACtB;AACAnB,YAAQC,GAAR,CAAYiB,CAAZ,EAAcC,CAAd,EAFsB,CAEL;AACpB,CAHD;AAIAF,IAAI,EAACC,GAAE,CAAH,EAAJ;AACAD,M,CAAM","file":"6、函数的拓展.js","sourcesContent":["/* \r\n    箭头函数    \"=>\" 定义函数  \r\n*/\r\nlet f = v => v + 1;\r\n/*  \r\n    function f(v){\r\n        return v\r\n    }\r\n*/\r\nconsole.log(f(1));\r\n\r\n// 多个参数就通过()包裹  没有参数 就通过() 代替参数部分\r\nlet f1 = () => 1;\r\nconsole.log(f1());\r\n\r\n// 当代码块的语句多于1条 则通过{}包裹着\r\nlet f2 = (value,...arg/*,value2*/) => {//...可以是包裹操作符 包裹操作符就把接下来的所有值都通过一个数组包裹起来 导致value2是没有值的\r\n    console.log(value);\r\n    console.log(...arg);//也可以是展开操作符 =>把数组的值都遍历了出来 通过一个字符串返回出来 并且只能在表达式中使用\r\n    console.log(arg);\r\n}\r\nlet arr = [2,3]\r\nf2(1,...arr);\r\n\r\n// 还可以通过解构赋值\r\nlet f3 = ({value,value1}) => {\r\n    return value + value1\r\n}\r\nconsole.log(f3({value:1,value1:2}));\r\n\r\nlet f4 = ([value,value1]) => {\r\n    return value + value1\r\n}\r\nconsole.log(f4([1,2]));\r\n\r\n// 自执行函数\r\n(()=>{\r\n    console.log(\"这是自执行函数 通过箭头函数 看起来整洁多了\");\r\n})()\r\n// 回调函数\r\nfunction fn(cb){\r\n    // setTimeout(cb(),0); 当程序运行这里的时候 cb()就直接执行了 只要看到() 就是直接执行 \r\n    setTimeout(cb,0);\r\n}\r\n// fn();\r\nfn(()=>{console.log(\"这是回调函数,也是简洁！\")});\r\n\r\n\r\n/* \r\n    注意事项:\r\n        （1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\r\n\r\n        （2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\r\n\r\n        （3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数 也就是... 代替。\r\n\r\n        （4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。\r\n*/\r\nlet fn2 = () => {\r\n    console.log(this);\r\n}\r\nfn2();//是在全局window 下定义的 所以是window\r\n\r\nfunction fn3(){\r\n    setTimeout(()=>{ \r\n        console.log(this);\r\n    },0);\r\n    // ((v1,v2)=>{\r\n    //     console.log(this);\r\n    //     console.log(arguments); 箭头函数不支持通过arguments获取到参数 只能通过...\r\n    // })(1,2)\r\n    ((...arg)=>{\r\n        console.log(this);\r\n        console.log(...arg);\r\n    })(1,2)\r\n    \r\n}\r\n// fn3(); fn3是在window下定义的 箭头函数又是在fn3定义的\r\nfn3.call({});//修改fn3的this\r\n\r\n// ==========================================箭头函数end=============================================\r\n\r\n/* \r\n    函数的参数允许定义默认值了\r\n*/\r\nlet fn4 = (value = 1,value1 = 2) => {\r\n    console.log(value,value1);\r\n}\r\nfn4(2)\r\nfn4()\r\n\r\nlet fn5 = ({x,y} = {}) => {\r\n    // 上面定义的默认是{} => {undefined,undefined} 也就是上面的{x,y} = {} 其实就是解构赋值一样 \r\n    console.log(x,y);//1 undefined  首先 下面解构的时候 因为y没有对应的值 所以解构失败 赋值undefined  并且形参定义了默认值{} 也没有赋值 所以解构的时候 也是undefined\r\n}\r\nfn5({x:1});\r\nfn5();//如果不给默认值 那么这里不传入参数 就会报错！ 安全性问题！\r\n\r\n\r\n"]}